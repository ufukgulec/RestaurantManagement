@using Newtonsoft.Json
@model List<RestaurantManagement.Domain.AppEntities.OSHeaderAction>
@{
    ViewData["Title"] = "Index";
    JsonSerializerSettings settings = new JsonSerializerSettings
            {
                PreserveReferencesHandling = PreserveReferencesHandling.Objects
            };
    var serializer = JsonSerializer.Create(settings);
}
@section Styles{
    <link rel="stylesheet" type="text/css" href="https://cdn3.devexpress.com/jslib/22.1.6/css/dx.common.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn3.devexpress.com/jslib/22.1.6/css/dx.light.css" />
}
    <div class="d-flex flex-column-fluid">
        <div class="container">
            <div class="card card-custom">
                <div class="card-body">
                    <div id="gridContainer"></div>
                </div>
            </div>
        </div>
    </div>
    @section Scripts{
    <script src="https://cdn3.devexpress.com/jslib/22.1.6/js/dx.all.js"></script>
    <script src="https://unpkg.com/devextreme-aspnet-data@2.8.6/js/dx.aspnet.data.js"></script>
    <script>
        function getIcons() {
            const icons = [
                'fas fa-pencil-alt',
                'fa fa-comment-alt',
                'fa fa-map-marker-alt',
                'fa fa-quote-right',
                'fas fa-pencil-alt',
                'far fa-clock',
                'far fa-check-square',
                'far fa-comment-dots',
                'far fa-envelope',
                'far fa-credit-card',
                'far fa-file-excel',
                'far fa-file-alt',
                'far fa-edit',
                'far fa-credit-card',
                'far fa-hourglass',
                'far fa-paper-plane',
                'far fa-save',
                'far fa-times-circle',
                'fas fa-archive',
                'fas fa-bell',
                'fas fa-biking',
                'fas fa-business-time',
                'fas fa-car-side',
                'fas fa-check-circle',
                'fas fa-exclamation-circle',
                'fab fa-dropbox'
            ];
            const colors = [
                'text-success', 'text-primary', 'text-danger', 'text-warning', 'text-info', 'text-dark'
            ];
            const result = [];
            for (let i = 0; i < icons.length; i++) {
                for (let k = 0; k < colors.length; k++) {
                    result.push(icons[i] + " " + colors[k]);
                }
            }
            return result;
        }
        function getData() {
            return @Html.Raw(JsonConvert.SerializeObject(Model,settings));
        }
        $(() => {
            bind1();
        });
        function bind1() {
            $('#gridContainer').dxDataGrid({
                dataSource: getData(),
                paging: {
                    pageSize: 10,
                },
                pager: {
                    visible: true,
                    allowedPageSizes: [10, 20, 'all'],
                    showPageSizeSelector: true,
                    showInfo: true,
                    showNavigationButtons: true,
                },
                scrolling: {
                    rowRenderingMode: 'virtual',
                },
                searchPanel: {
                    highlightCaseSensitive: false,
                    highlightSearchText: true,
                    placeholder: "Search...",
                    searchVisibleColumnsOnly: false,
                    text: "",
                    visible: true,
                    width: 160
                },
                filterRow: {
                    visible: true,
                    applyFilter: 'auto',
                },
                headerFilter: {
                    visible: true,
                },
                editing: {
                    mode: 'popup',
                    refreshMode: 'reshape',
                    useIcons: true,
                    allowUpdating: true,
                    allowAdding: true,
                    allowDeleting: true,
                    confirmDelete: false,
                    popup: {
                        title: 'Yeni & Güncelleme Formu',
                        showTitle: true,
                        width: 700,
                        height: 525,
                    },
                    form: {
                        items: [{
                            itemType: 'group',
                            colCount: 2,
                            colSpan: 2,
                            items: [
                                'Name', 'OSHeaderId', 'Class',
                                {
                                    dataField: 'Icon',
                                    editorType: 'dxSelectBox',
                                    colSpan: 1,
                                    editorOptions: {
                                        items: getIcons(),
                                        searchEnabled: true,
                                        itemTemplate(data) {
                                            return `<div class='custom-item'><i class='${data}' /></div>`;
                                        },
                                    },
                                },
                                {
                                    dataField: 'Action',
                                    colSpan: 2,
                                },
                                {
                                    itemType: 'group',
                                    colCount: 2,
                                    colSpan: 2,
                                    disabled: true,
                                    caption: 'Tarih',
                                    items: ['CreatedDate', 'UpdatedDate'],
                                },
                                {
                                    dataField: 'Active',
                                    editorType: 'dxCheckBox',
                                },
                            ],
                        },
                        ],
                    },
                },
                columns: [
                    {
                        dataField: 'Name',
                        caption: 'İsim',
                    },
                    {
                        dataField: 'Action',
                        caption: 'Action',
                    },
                    {
                        dataField: 'Icon',
                        caption: 'Icon',
                    },
                    {
                        dataField: 'Class',
                        caption: 'Class',
                    },
                    {
                        dataField: 'OSHeaderId',
                        caption: 'Başlık',
                        width: 125,
                        lookup: {
                            dataSource: @Html.Raw(JsonConvert.SerializeObject(ViewBag.Headers)),
                            displayExpr: 'Name',
                            valueExpr: 'Id',
                        },
                    },
                    {
                        dataField: 'Active',
                        caption: 'Aktif',
                        datatype: 'boolean',
                    },
                    {
                        dataField: 'CreatedDate',
                        caption: 'Oluşturma Tarihi',
                        dataType: "date",
                        value: new Date(),
                    },
                    {
                        dataField: 'UpdatedDate',
                        caption: 'Düzenleme Tarihi',
                        dataType: "date",
                        value: new Date(),
                        sortOrder: 'desc',
                    },
                ],
                onRowInserting: function (e) {
                    const deferred = $.Deferred();
                    e.data.CreatedDate = new Date();
                    e.data.UpdatedDate = new Date();
                    const promptPromise = DevExpress.ui.dialog.confirm("Emin misin?", "Değişiklikleri onayla");
                    promptPromise.done((dialogResult) => {
                        if (dialogResult) {
                            $.ajax({
                                url: "@Url.Action("DXInsert","Ingredient")",
                                dataType: "json",
                                type: 'POST',
                                contentType: "application/json; charset=utf-8",
                                data: JSON.stringify(e.data),
                                beforeSend: function () {
                                    KTApp.block('.dx-overlay-content', {
                                        overlayColor: '#000000',
                                        state: 'danger',
                                        message: 'Bekleyiniz...'
                                    });
                                },
                                success: function (validationResult) {
                                    if (validationResult.errorText) {
                                        deferred.reject(validationResult.errorText);
                                    } else {
                                        e.data.Id = validationResult.id;
                                        deferred.resolve(false);
                                        KTApp.unblock('.dx-overlay-content');
                                        Swal.fire("Başarılı!", "Kaydetme işlemi başarılı.", "success");
                                    }
                                },
                                error: function () {
                                    deferred.reject("Kaydetme işleminde hata oluştu.");
                                },
                            });
                        } else {
                            deferred.resolve(true);
                        }
                    });
                    e.cancel = deferred.promise();
                },
                onRowUpdating: function (e) {
                    const deferred = $.Deferred();
                    const promptPromise = DevExpress.ui.dialog.confirm("Emin misin?", "Değişiklikleri onayla");
                    e.newData.Role = null;
                    e.newData.UpdatedDate = new Date();
                    e.oldData.UpdatedDate = new Date();
                    promptPromise.done((dialogResult) => {
                        if (dialogResult) {
                            $.ajax({
                                url: "@Url.Action("DXUpdate","Ingredient")",
                                dataType: "json",
                                type: 'POST',
                                contentType: "application/json; charset=utf-8",
                                data: JSON.stringify($.extend(e.oldData, e.newData)),
                                beforeSend: function () {
                                    KTApp.block('.dx-overlay-content', {
                                        overlayColor: '#000000',
                                        state: 'danger',
                                        message: 'Bekleyiniz...'
                                    });
                                },
                                success: function (validationResult) {
                                    if (validationResult.errorText) {
                                        deferred.reject(validationResult.errorText);
                                    } else {
                                        deferred.resolve(false);
                                        KTApp.unblock('.dx-overlay-content');
                                        Swal.fire("Başarılı!", "Kaydetme işlemi başarılı.", "success");
                                    }
                                },
                                error: function () {
                                    deferred.reject("Kaydetme işleminde hata oluştu.");
                                },
                            });
                        } else {
                            deferred.resolve(true);
                        }
                    });
                    e.cancel = deferred.promise();
                },
                onRowRemoving: function (e) {
                    console.log(e);
                    const deferred = $.Deferred();
                    const promptPromise = DevExpress.ui.dialog.confirm("Emin misin?", "Değişiklikleri onayla");
                    promptPromise.done((dialogResult) => {
                        if (dialogResult) {
                            $.ajax({
                                url: "@Url.Action("DXRemove","Ingredient")",
                                dataType: "json",
                                type: 'POST',
                                contentType: "application/json; charset=utf-8",
                                data: JSON.stringify(e.data),
                                beforeSend: function () {
                                    KTApp.block('.dx-overlay-content', {
                                        overlayColor: '#000000',
                                        state: 'danger',
                                        message: 'Bekleyiniz...'
                                    });
                                },
                                success: function (validationResult) {
                                    if (validationResult.errorText) {
                                        deferred.reject(validationResult.errorText);
                                    } else {

                                        deferred.resolve(false);
                                        KTApp.unblock('.dx-overlay-content');
                                        Swal.fire("Başarılı!", "Kaydetme işlemi başarılı.", "success");
                                    }
                                },
                                error: function () {
                                    deferred.reject("Kaydetme işleminde hata oluştu.");
                                },
                            });
                        } else {
                            deferred.resolve(true);
                        }
                    });
                    e.cancel = deferred.promise();
                },
                showBorders: true,
            }).dxDataGrid('instance');
        }
    </script>
}