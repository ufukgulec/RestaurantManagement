@using Newtonsoft.Json
@using RestaurantManagement.Domain.AppEntities
@using RestaurantManagement.MVC.Controllers
@model List<RestaurantManagement.Domain.AppEntities.Menu>
@section Styles{
    <link rel="stylesheet" type="text/css" href="https://cdn3.devexpress.com/jslib/22.1.6/css/dx.common.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn3.devexpress.com/jslib/22.1.6/css/dx.light.css" />
    <style>

    </style>
}
    <div class="d-flex flex-column-fluid">
        <div class="container">
            <div class="card card-custom">
                <div class="card-body">
                    <div id="links"></div>
                </div>
            </div>
        </div>
    </div>
    @section Scripts{
    <script src="https://cdn3.devexpress.com/jslib/22.1.6/js/dx.all.js"></script>
    <script>

        var dataLinks = @Html.Raw(JsonConvert.SerializeObject(Model));
        $(() => {

            //...Datayı çeker...
            //$('#links').dxTreeList('instance').option('dataSource');
            //...Datayı çeker buton ile kaydet...

            $(() => {
                const treeList = $('#links').dxTreeList({
                    dataSource: dataLinks.sort((a, b) => { return a.Row_Number - b.Row_Number }),
                    rootValue: -1,
                    keyExpr: 'Row_ID',
                    editing: {
                        mode: 'row',
                        allowUpdating: true,
                        //allowDeleting: true,
                        allowAdding: true,
                        startEditAction: 'dblClick',
                        useIcons: true,
                    },
                    loadPanel: {
                        enabled: true,
                    },
                    selection: {
                        mode: 'multiple',
                        recursive: true,
                    },
                    searchPanel: {
                        visible: true,
                        highlightCaseSensitive: true,
                    },
                    toolbar: {
                        items: ["searchPanel", "addRowButton",
                            {
                                location: 'after',
                                widget: 'dxButton',
                                options: {
                                    icon: 'revert',
                                    onClick() {
                                        treeList.refresh();
                                    },
                                },
                            },
                            {
                                locateInMenu: "auto",
                                widget: 'dxButton',
                                options: {
                                    text: 'Veritabanı Gönder',
                                    icon: 'import',
                                    onClick(e) {
                                        var linkler = $('#links').dxTreeList('instance').option('dataSource').map((curr, index) => curr.Row_Number = index);
                                        const promptPromise = DevExpress.ui.dialog.confirm("Emin misin?", "Değişiklikleri onayla");
                                        promptPromise.done((dialogResult) => {
                                            if (dialogResult) {
                                                $.ajax({
                                                    url: "@Url.Action("DXInsert","Menu")",
                                                    dataType: "json",
                                                    type: 'POST',
                                                    contentType: "application/json; charset=utf-8",
                                                    data: JSON.stringify($('#links').dxTreeList('instance').option('dataSource')),
                                                    beforeSend: function () {
                                                        KTApp.block('.dx-overlay-content', {
                                                            overlayColor: '#000000',
                                                            state: 'danger',
                                                            message: 'Bekleyiniz...'
                                                        });
                                                    },
                                                    success: function (validationResult) {
                                                        if (validationResult.errorText) {
                                                            deferred.reject(validationResult.errorText);
                                                        } else {
                                                            //e.data.Row_ID = validationResult.Row_ID;

                                                            deferred.resolve(false);
                                                            KTApp.unblock('.dx-overlay-content');
                                                            Swal.fire("Başarılı!", "Kaydetme işlemi başarılı.", "success");
                                                        }
                                                    },
                                                    error: function () {
                                                        deferred.reject("Kaydetme işleminde hata oluştu.");
                                                    },
                                                });
                                            } else {
                                                deferred.resolve(true);
                                            }
                                        });
                                        e.cancel = deferred.promise();
                                    },
                                },
                            },
                        ]
                    },
                    rowDragging: {
                        allowDropInsideItem: true,
                        allowReordering: true,
                        onDragChange(e) {
                            const visibleRows = treeList.getVisibleRows();
                            const sourceNode = treeList.getNodeByKey(e.itemData.Row_ID);
                            let targetNode = visibleRows[e.toIndex].node;

                            while (targetNode && targetNode.data) {
                                if (targetNode.data.ID === sourceNode.data.Row_ID) {
                                    e.cancel = true;
                                    break;
                                }
                                targetNode = targetNode.parent;
                            }
                        },
                        onReorder(e) {
                            const visibleRows = e.component.getVisibleRows();

                            if (e.dropInsideItem) {
                                e.itemData.Head_ID = visibleRows[e.toIndex].key;
                            } else {
                                const sourceData = e.itemData;

                                const toIndex = e.fromIndex > e.toIndex ? e.toIndex - 1 : e.toIndex;
                                let targetData = toIndex >= 0 ? visibleRows[toIndex].node.data : null;

                                if (targetData && e.component.isRowExpanded(targetData.Id)) {
                                    sourceData.Head_ID = targetData.Row_ID;
                                    targetData = null;
                                } else {
                                    sourceData.Head_ID = targetData ? targetData.Head_ID : e.component.option('rootValue');
                                }

                                const sourceIndex = dataLinks.indexOf(sourceData);
                                dataLinks.splice(sourceIndex, 1);

                                const targetIndex = dataLinks.indexOf(targetData) + 1;
                                dataLinks.splice(targetIndex, 0, sourceData);
                            }

                            e.component.refresh();
                        },
                    },
                    parentIdExpr: 'Head_ID',
                    columns: [
                        {
                            dataField: 'Caption',
                            caption: 'Başlık',
                        },
                        {
                            dataField: 'Controller',
                            caption: 'Denetleyici',
                        },
                        {
                            dataField: 'Action',
                            caption: 'Aksiyon',
                        },
                        {
                            dataField: 'Params',
                            caption: 'Parametre',
                        },
                        {
                            dataField: 'Icon',
                            caption: 'Simge',
                            width: 100
                        },
                        {
                            dataField: 'Active',
                            caption: 'Görünürlük',
                            dataType: 'boolean',
                        },

                        {
                            dataField: 'Type',
                            caption: 'Tip',
                            lookup: {
                                dataSource: ["Sabit", "Kategori", "Alt Kategori", "Yönlendirme"],
                                //valueExpr: 'Type',
                                //displayExpr: 'Type',
                            },
                        },
                    ],
                    expandedRowKeys: [1],
                    showRowLines: true,
                    showBorders: true,
                    columnAutoWidth: true,
                }).dxTreeList('instance');


            });

        });

    </script>
}